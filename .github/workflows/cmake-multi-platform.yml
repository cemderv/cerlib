name: CMake Build

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  BUILD_TYPE: Release

jobs:
  build-linux-gcc13:
    runs-on: ubuntu-22.04
    container: gcc:13
    steps:
      - uses: actions/checkout@v4
      - name: Install prerequisites
        run: |
          apt update -y
          apt upgrade -y
          apt install -y cmake build-essential libwayland-dev libxkbcommon-dev wayland-protocols \
          extra-cmake-modules xorg-dev libasound2-dev clang-tidy clang-tools cppcheck

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCERLIB_ENABLE_TESTS=ON \
          -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Run Cppcheck
        run: python3 cppcheck.py ${{github.workspace}}/build

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

      - name: Run Tests
        run: ${{github.workspace}}/build/bin/cerlibTests


  build-linux-clang16:
    runs-on: ubuntu-22.04
    container: gcc:13
    steps:
      - uses: actions/checkout@v4
      - name: Install prerequisites
        run: |
          apt update -y
          apt upgrade -y
          apt install -y cmake build-essential libwayland-dev libxkbcommon-dev wayland-protocols \
          xorg-dev libasound2-dev lsb-release wget software-properties-common cppcheck gnupg

      - name: Install Clang
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          ./llvm.sh 16 all

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_C_COMPILER=clang-16 \
          -DCMAKE_CXX_COMPILER=clang++-16 \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCERLIB_ENABLE_TESTS=ON \
          -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

      - name: Run Cppcheck
        run: python3 cppcheck.py ${{github.workspace}}/build

      - name: Run Tests
        run: ${{github.workspace}}/build/bin/cerlibTests

  build-windows-vs2022:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build -DCERLIB_ENABLE_TESTS=ON -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

      - name: Run Tests
        run: ${{github.workspace}}\build\bin\Release\cerlibTests.exe

  build-macos-13:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake (Xcode)
        run: |
          cmake -B ${{github.workspace}}/build -G Xcode -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCERLIB_ENABLE_TESTS=ON -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Build (Xcode)
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

      - name: Run Tests
        run: ${{github.workspace}}/build/bin/Release/cerlibTests


  build-macos-14:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake (Xcode)
        run: |
          cmake -B ${{github.workspace}}/build -G Xcode -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCERLIB_ENABLE_TESTS=ON -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Build (Xcode)
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

      - name: Run Tests
        run: ${{github.workspace}}/build/bin/Release/cerlibTests

