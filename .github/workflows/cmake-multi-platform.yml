name: CMake Build

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-linux:
    name: Linux build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Cache APT packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: cmake build-essential libwayland-dev libxkbcommon-dev wayland-protocols extra-cmake-modules xorg-dev libasound2-dev clang-tidy clang-tools cppcheck lsb-release wget software-properties-common gnupg ninja-build
          version: 1.0

      - name: Install Clang
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh 16 all

      - name: Configure CMake (GCC)
        run: |
          cmake -B ${{github.workspace}}/build-gcc \
          -G "Ninja Multi-Config" \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCERLIB_ENABLE_TESTS=ON \
          -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Build (GCC)
        run: cmake --build ${{github.workspace}}/build-gcc --config Release --parallel

      - name: Run Tests (GCC)
        run: ${{github.workspace}}/build-gcc/bin/Release/cerlibTests

      - name: Configure CMake (Clang)
        run: |
          cmake -B ${{github.workspace}}/build-clang \
          -G "Ninja Multi-Config" \
          -DCMAKE_C_COMPILER=clang-16 \
          -DCMAKE_CXX_COMPILER=clang++-16 \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCERLIB_ENABLE_TESTS=ON \
          -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Run Cppcheck
        run: python3 cppcheck.py ${{github.workspace}}/build-clang

      - name: Build (Clang)
        run: cmake --build ${{github.workspace}}/build-clang --config Release --parallel

      - name: Run Tests (Clang)
        run: ${{github.workspace}}/build-clang/bin/Release/cerlibTests

  build-windows:
    name: Windows build
    strategy:
      matrix:
        os: [ 2019, 2022 ]
    runs-on: windows-${{matrix.os}}
    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build -DCERLIB_ENABLE_TESTS=ON -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Release --parallel

      - name: Run Tests
        run: ${{github.workspace}}\build\bin\Release\cerlibTests.exe

  build-macos:
    name: macOS build
    strategy:
      matrix:
        os: [ 13, 14 ]
    runs-on: macos-${{matrix.os}}
    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake (Xcode)
        run: |
          cmake -B ${{github.workspace}}/build -G Xcode -DCERLIB_ENABLE_TESTS=ON -DCERLIB_ENABLE_RENDERING_TESTS=OFF

      - name: Build (Xcode)
        run: cmake --build ${{github.workspace}}/build --config Release --parallel

      - name: Run Tests
        run: ${{github.workspace}}/build/bin/Release/cerlibTests


